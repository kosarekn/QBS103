# Save or display the panel
#ggsave(paste0(dir,"umap_panel.png"), umap_panel, width = 15, height = 25)
tiff(paste0(dir,"umap_panel.tiff"), width = 25, height = 25, res = 300, units = "in")
umap_panel
dev.off()
tiff(paste0(dir,"cell-cycle-dimplot.tiff"), width = 10, height = 10, res = 300, units = "in")
DimPlot(integrated, group.by = "Phase", reduction = "umap")
dev.off()
lst <- list(4, 'j', 'Y', 5, 'f', 'K', 8, 'z', 'T', 'c', 0, 'B', 2, 'm', 'X', 9, 'd', 'V', 3, 'n', 'G', 6, 'h', 'J', 2, 'p', 'O', 1, 'q', 'R', 7, 's', 'D', 2, 'l', 'N', 0, 'w', 'E', 5, 'e', 'U', 4, 'i', 'P', 1, 'a', 'H', 8, 'y', 'S', 3, 'g', 'F', 9, 'b', 'M', 6, 'k', 'L', 7)
length(which(my_types == "numeric"))
#a)
my_types <- c()
for(thing in lst){
my_types <- append(my_types, class(thing))
}
print(my_types)
#b)
length(which(my_types == "numeric"))
?melt()
for (i in 1:10){
print(i)
}
for (i in 1:3){
y = i + 2
print(y)
}
for (i in 1:3){
y = i + 2
print(y/3)
}
x <- 100
repeat{
x <- x *2
print(x)
if (x >= 1000)
break
}
my_fun <- function(a_string){
print(a_string)
}
my_fun(a_string = "Coding is fun!")
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
filenames <- list.files("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/", pattern = ".csv")
print(filenames)
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
library(ggplot2)
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
plot(histogram)
}
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
library(ggplot2)
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
plot(histogram)
}
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
library(harrypotter)
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
library(harrypotter)
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
plot(box_plot)
}
fun_stats_pretty_plots <- function(path_to_directory){
filenames <- list.files(path = path_to_directory, pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
print(summary(age_var))
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
box_plot_race <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
box_plot_disease_status <- ggplot(the_file, aes(x=disease_status, y=age, fill = disease_status)) +
geom_boxplot() + scale_fill_hp_d(option = "lunalovegood")
plot(histogram)
plot(box_plot_race)
plot(box_plot_disease_status)
}
}
fun_stats_pretty_plots("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
setwd("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
fun_stats_pretty_plots <- function(path_to_directory){
filenames <- list.files(path = path_to_directory, pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
print(summary(age_var))
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
box_plot_race <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
box_plot_disease_status <- ggplot(the_file, aes(x=disease_status, y=age, fill = disease_status)) +
geom_boxplot() + scale_fill_hp_d(option = "lunalovegood")
plot(histogram)
plot(box_plot_race)
plot(box_plot_disease_status)
}
}
fun_stats_pretty_plots("/Users/f002yt8/Documents/QBS_103/Data_Analytics_1_Lesson_Data/")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(Seurat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
brain.data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/GSE203154_RAW/")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
brain.data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/GSE203154_RAW/")
brain <- CreateSeuratObject(counts = brain.data, project = "public_brain", min.cells = 3, min.features = 200)
head(brain[[]])
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(Seurat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
brain.data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/filtered_feature_bc_matrix_MouseTransplantedGBM/filtered_gene_bc_matrices/mm10/")
brain <- CreateSeuratObject(counts = brain.data, project = "public_brain", min.cells = 3, min.features = 200)
head(brain[[]])
metadata <- read.csv("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/annot_Mouse_GBM_Full.csv", header = T, row.names = 1)
metadata <- read.csv("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/annot_Mouse_GBM_Full.csv", header = T)
head(metadata)
rownames(metadata) <- metadata$cell
head(metadata)
brain <- AddMetaData(brain, metadata = metadata, col.name = c("x","y","ident","cluster","cell", "sample"))
head(brain[[]])
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SaveH5Seurat(brain, filename = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/brain.h5Seurat")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(Seurat)
library(SeuratData)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(Seurat)
#library(SeuratData)
library(SeuratDisk)
SaveH5Seurat(brain, filename = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/brain.h5Seurat")
Convert("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/brain_immune_atlas/brain.h5Seurat", dest = "h5ad")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(caret)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data(oil)
head(oil)
oil <- data(oil)
head(oil)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data(oil)
head(fattyAcids)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       READ IN LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data(segmentationData)
head(segmentationData)
levels(segmentationData$Class)
head(segmentationData)
dim(segmentationData)
head(segmentationData)
length(which(is.na(segmentationData) == TRUE))
preProcValues <- preProcess(segmentationData, method=c("center", "scale" ))
cleanData <- predict (preProcValues, segmentationData)
cleanData <- subset(cleanData, select = -c(Case))
head(cleanData)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                         DATA SPLITTING
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# We will set a seed so we end up with the same split
set.seed(3456)
# This code splits our data
trainIndex <- createDataPartition(cleanData$Class, p = 2/3, list = FALSE, times = 1)
# We assign the 2/3 of data to a training set variable
Train <- cleanData[ trainIndex,]
# We assign the remaining 1/3 of data to a testing set variable
Test <- cleanData[-trainIndex,]
# Let's take a look at the dimensions of our training and testing set to see if that all worked out ok
dim(Train)
dim(Test)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       FEATURE SELECTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This function generates a control object that can be used to specify the details of the feature selection algorithms used in this package
rctrl1 <- rfeControl(method = "repeatedcv", functions = caretFuncs, allowParallel = F)
#trainCtl1<-trainControl(method = "cv", number=3, classProbs = TRUE, allowParallel = F)
trainCtl1 <- trainControl(method = "repeatedcv", number = 5,repeats = 10)
# We will set a seed so we end up with the same split
set.seed(24)
# Run simple backward selection
my_fit <- rfe(x=Train,y=Train$Class,
sizes = c(5,10,15,20,25,30,35,40,45,50,75,100),
method = "rf", trControl = trainCtl1, tuneLength = 10, rfeControl = rctrl1)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       FEATURE SELECTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This function generates a control object that can be used to specify the details of the feature selection algorithms used in this package
rctrl1 <- rfeControl(method = "cv", functions = caretFuncs, allowParallel = F)
#trainCtl1<-trainControl(method = "cv", number=3, classProbs = TRUE, allowParallel = F)
trainCtl1 <- trainControl(method = "cv", number = 3)
# We will set a seed so we end up with the same split
set.seed(24)
# Run simple backward selection
my_fit <- rfe(x=Train,y=Train$Class,
sizes = c(5,10,15,20,25,30,35,40,45,50,75,100),
method = "rf", trControl = trainCtl1, tuneLength = 10, rfeControl = rctrl1)
my_fit
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               PREDICTIVE MODELING AND VALIDATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
preds<-predict(my_fit,Test)
confusionMatrix(preds,Test$Class,positive="WS")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       FEATURE SELECTION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rctrl1 <- rfeControl(method = "boot", functions = caretFuncs, allowParallel = F)
trainCtl1 <- trainControl(method = "boot", number = 3, classProbs = TRUE, allowParallel = F)
set.seed(24)
my_fit <- rfe(x=Train,y=Train$Class,
sizes = c(5,10,15,20),
method = "glmnet", trControl = trainCtl1, tuneLength = 10, rfeControl = rctrl1)
my_fit
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               PREDICTIVE MODELING AND VALIDATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
preds<-predict(my_fit,Test)
confusionMatrix(preds,Test$Class,positive="WS")
my_fit
preds<-predict(my_fit,Test)
head(preds)
confusionMatrix(preds,preds$pred,positive="WS")
confusionMatrix(preds,Test$Class,positive="WS")
levels(preds$pred)
levels(Test$Class)
confusionMatrix(preds$pred,Test$Class,positive="WS")
library(Seurat)
library(reticulate)
anndata <- import("anndata", convert = FALSE)
anndata <- import("anndata", convert = FALSE)
install.packages("anndata")
anndata <- import("anndata", convert = FALSE)
library(anndata)
anndata <- import("anndata", convert = FALSE)
adata <- anndata$read_h5ad("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5ad")
seurat_object <- as.Seurat(adata)
adata <- anndata$read_h5ad("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5ad")
counts <- as.matrix(adata$X)
rownames(counts) <- adata$obs_names$to_list()
library(SeuratDisk)
Convert("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5ad", dest = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5seurat", overwrite = TRUE)
seurat_object <- LoadH5Seurat("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5seurat")
devtools::install_github("cellgeni/sceasy")
3
sceasy::convertFormat("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.h5ad", from="anndata", to="seurat",
outFile='/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated.rds')
pbmc.data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix/")
data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix/")
data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix/")
data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix/")
data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix")
data <- Read10X(data.dir = "/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/matrix/")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                     READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- read.csv("/Users/f002yt8/Documents/20240730_Medicare_Manuscript/data/tables_ssc_zip_sup.csv")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                 DATA EXPLORATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Pad zip codes with 0
# Remove any row where the benes_w_ssc_sup is SUPPRESSED
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   PAD ZIP CODES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$zipcode <- sprintf('%05d', as.integer(dat$zipcode))
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#           REMOVE ROWS WITH SUPPRESSED BENES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#dat <- dat[dat$everyone_sup != "SUPPRESSED", ]
dat <- dat[dat$benes_w_ssc_sup != "SUPPRESSED", ]
#dat[dat == "SUPPRESSED"] <- 0
dim(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#       CONVERT TO INTEGERS MAKE ZIPS ROWNAMES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$everyone_sup <- as.integer(dat$everyone_sup)
dat$benes_wo_ssc_sup <- as.integer(dat$benes_wo_ssc_sup)
dat$benes_w_ssc_sup <- as.integer(dat$benes_w_ssc_sup)
rownames(dat) <- dat$zipcode
dat <- subset(dat, select = -c(zipcode))
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               CALCULATE INCIDENCE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$Incidence <- (dat$everyone_sup/dat$benes_w_ssc_sup)*100
head(dat)
dat$Incidence <- (dat$benes_w_ssc_sup/dat$everyone_sup)*100
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               WRITE TO CSV FILE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
write.csv(dat, "/Users/f002yt8/Documents/20240730_Medicare_Manuscript/data/ssc_incidence.csv")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                     READ IN DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- read.csv("/Users/f002yt8/Documents/20240730_Medicare_Manuscript/data/tables_ssc_zip_sup.csv")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                 DATA EXPLORATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Pad zip codes with 0
# Remove any row where the benes_w_ssc_sup is SUPPRESSED
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   PAD ZIP CODES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$zipcode <- sprintf('%05d', as.integer(dat$zipcode))
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#           REMOVE ROWS WITH SUPPRESSED BENES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#dat <- dat[dat$everyone_sup != "SUPPRESSED", ]
dat <- dat[dat$benes_w_ssc_sup != "SUPPRESSED", ]
#dat[dat == "SUPPRESSED"] <- 0
dim(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#       CONVERT TO INTEGERS MAKE ZIPS ROWNAMES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$everyone_sup <- as.integer(dat$everyone_sup)
dat$benes_wo_ssc_sup <- as.integer(dat$benes_wo_ssc_sup)
dat$benes_w_ssc_sup <- as.integer(dat$benes_w_ssc_sup)
rownames(dat) <- dat$zipcode
dat <- subset(dat, select = -c(zipcode))
head(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               CALCULATE INCIDENCE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat$Incidence <- (dat$benes_w_ssc_sup/dat$everyone_sup)*100
dat$Zip_Codes <- rownames(dat)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#               WRITE TO CSV FILE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
write.csv(dat, "/Users/f002yt8/Documents/20240730_Medicare_Manuscript/data/ssc_incidence.csv")
Convert("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated_sub.h5ad", dest = "h5seurat", overwrite = TRUE)
library(SeuratDisk)
Convert("/Users/f002yt8/Documents/20240606_Huang_Xenium/files/vincente_ref/GSE246154_10xnuclei_annotated_sub.h5ad", dest = "h5seurat", overwrite = TRUE)
setwd("/Users/noellekosarek/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
setwd("/Users/noellekosarek/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
setwd("/Users/noellekosarek/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data/")
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/noellekosarek/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
for (i in 1:10){
print(i)
}
x = 2
for (i in 1:3){
print(i+2)
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/noellekosarek/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
print(filenames)
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
print(filenames)
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
print(filenames)
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
for (file in filenames){
the_file <- read.csv(file)
print(summary(the_file$age))
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
print(summary(the_file$age))
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
library(ggplot2)
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
plot(histogram)
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
library(harrypotter)
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
plot(box_plot)
}
fun_stats_pretty_plots <- function(path_to_directory){
filenames <- list.files(path = path_to_directory, pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
print(summary(age_var))
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
box_plot_race <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
box_plot_disease_status <- ggplot(the_file, aes(x=disease_status, y=age, fill = disease_status)) +
geom_boxplot() + scale_fill_hp_d(option = "lunalovegood")
plot(histogram)
plot(box_plot_race)
plot(box_plot_disease_status)
}
}
fun_stats_pretty_plots("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
setwd("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data", pattern = ".csv")
fun_stats_pretty_plots <- function(path_to_directory){
filenames <- list.files(path = path_to_directory, pattern = ".csv")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
print(summary(age_var))
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
box_plot_race <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
box_plot_disease_status <- ggplot(the_file, aes(x=disease_status, y=age, fill = disease_status)) +
geom_boxplot() + scale_fill_hp_d(option = "lunalovegood")
plot(histogram)
plot(box_plot_race)
plot(box_plot_disease_status)
}
}
fun_stats_pretty_plots("/Users/f002yt8/Documents/GitHub/QBS103/data/Data_Analytics_1_Lesson_Data")
